{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"blog/","text":"","title":"Blog"},{"location":"machine_learning_data_science/","text":"Machine Learning & Data Science Our world is full of Machine Learning and Data Science, so it's best to stay informed and use it for good. I've encountered a ton of nice learning resources, articles or simply fascinating inventions directly or indirectly related to ML & DS, that are listed below. Keep in mind, ML is at the intersection of Linear Algebra, Statistics, and Computer Science. An article by Ben Evans about what ML is and is not (at this point). The Elements of Statistical Learning by Trevor Hastie, Robert Tibshirani, and Jerome Friedman (all Stanford) is a great introductory book on the foundational concepts. I cannot recommend this book enough. Neural Networks and Deep Learning by Michael Nielsen (Y Combinator) is a free online book. On many occasions I've landed on this page to get a better understanding about neural networks, and it's helped almost always. Machine Learning by Andrew Ng (Stanford / Coursera) is the perfect course to start with ML if you know basic calculus, linear algebra and programming. TensorFlow World Resources is a collection of resources curated by Amirsina Torfi. Fairness in Machine Learning Fairness has become a hot topic, since we want (or rather need) to ensure we don't propagate biases in our data. Fairness and Machine Learning by Solon Barocas, Moritz Hardt, and Arvind Narayanan is currently still a work in progress, but what I've seen from it seemed extremely promising. Algorithmic Fairness is a blog with lots of articles about the topic by Suresh Venkatasubramanian. Moritz Hardt's class website for Fairness in Machine Learning has a great collection of material. Datasets Gengo.ai's list of the 50 best free datasets for ML ML applied to Natural Language Processing Word2Vec Understanding Word Vectors Spacy Visualization Facets Feature Visualization Machine Learning in the browser DeepLearn.js Machine Learning Art I'm personally interested in Machine Learning Art because it allows everyone to create beautiful paintings regardless of how skilled they are at painting. Even more so, you can use your own photos to create unique pieces that mean something to you, so it's not just the billionth photo of the Golden Gate Bridge, but it's your photo of the Golden Gate Bridge as if it was painted by Picasso! Some resources I recommend on this topic are below: Interactive Image Generation with GANs CycleGAN , CycleGAN and Pix2Pix Style2Paints Fast Style Transfer in TensorFlow Deep Photo Style Transfer Magenta This one is not quite art, but close enough... Background Removal with Deep Learning Deep Image Prior helps to improve pictures through denoising and artifact removal. Professional Level Photographs with Deep Learning Finding Research Papers Whether you're at university or just generally interested in research, in most cases you won't know exactly what you're looking for. Two great websites to get started are Google Scholar and Semantic Scholar . They essentially built search for research papers/journals/books/etc. Semantic Scholar offers a few features Google Scholar doesn't have, while Google Scholar seems to have more data overall at least in my experience. ArXiv is an archive for articles, usually used for sharing ideas that will later get submitted as papers to conferences. With ArXiv Vanity , you can read the papers rendered in the browser as opposed to the PDF format. Distill is aiming at making research \"clear, dynamic and vivid\". It is a super-interesting effort that shows that research does not have to be constrained by a printable A4 sized PDF format. Maybe all research can be published like this someday.","title":"ML & Data Science"},{"location":"machine_learning_data_science/#machine-learning-data-science","text":"Our world is full of Machine Learning and Data Science, so it's best to stay informed and use it for good. I've encountered a ton of nice learning resources, articles or simply fascinating inventions directly or indirectly related to ML & DS, that are listed below. Keep in mind, ML is at the intersection of Linear Algebra, Statistics, and Computer Science. An article by Ben Evans about what ML is and is not (at this point). The Elements of Statistical Learning by Trevor Hastie, Robert Tibshirani, and Jerome Friedman (all Stanford) is a great introductory book on the foundational concepts. I cannot recommend this book enough. Neural Networks and Deep Learning by Michael Nielsen (Y Combinator) is a free online book. On many occasions I've landed on this page to get a better understanding about neural networks, and it's helped almost always. Machine Learning by Andrew Ng (Stanford / Coursera) is the perfect course to start with ML if you know basic calculus, linear algebra and programming. TensorFlow World Resources is a collection of resources curated by Amirsina Torfi.","title":"Machine Learning &amp; Data Science"},{"location":"machine_learning_data_science/#fairness-in-machine-learning","text":"Fairness has become a hot topic, since we want (or rather need) to ensure we don't propagate biases in our data. Fairness and Machine Learning by Solon Barocas, Moritz Hardt, and Arvind Narayanan is currently still a work in progress, but what I've seen from it seemed extremely promising. Algorithmic Fairness is a blog with lots of articles about the topic by Suresh Venkatasubramanian. Moritz Hardt's class website for Fairness in Machine Learning has a great collection of material.","title":"Fairness in Machine Learning"},{"location":"machine_learning_data_science/#datasets","text":"Gengo.ai's list of the 50 best free datasets for ML","title":"Datasets"},{"location":"machine_learning_data_science/#ml-applied-to-natural-language-processing","text":"Word2Vec Understanding Word Vectors Spacy","title":"ML applied to Natural Language Processing"},{"location":"machine_learning_data_science/#visualization","text":"Facets Feature Visualization","title":"Visualization"},{"location":"machine_learning_data_science/#machine-learning-in-the-browser","text":"DeepLearn.js","title":"Machine Learning in the browser"},{"location":"machine_learning_data_science/#machine-learning-art","text":"I'm personally interested in Machine Learning Art because it allows everyone to create beautiful paintings regardless of how skilled they are at painting. Even more so, you can use your own photos to create unique pieces that mean something to you, so it's not just the billionth photo of the Golden Gate Bridge, but it's your photo of the Golden Gate Bridge as if it was painted by Picasso! Some resources I recommend on this topic are below: Interactive Image Generation with GANs CycleGAN , CycleGAN and Pix2Pix Style2Paints Fast Style Transfer in TensorFlow Deep Photo Style Transfer Magenta This one is not quite art, but close enough... Background Removal with Deep Learning Deep Image Prior helps to improve pictures through denoising and artifact removal. Professional Level Photographs with Deep Learning","title":"Machine Learning Art"},{"location":"machine_learning_data_science/#finding-research-papers","text":"Whether you're at university or just generally interested in research, in most cases you won't know exactly what you're looking for. Two great websites to get started are Google Scholar and Semantic Scholar . They essentially built search for research papers/journals/books/etc. Semantic Scholar offers a few features Google Scholar doesn't have, while Google Scholar seems to have more data overall at least in my experience. ArXiv is an archive for articles, usually used for sharing ideas that will later get submitted as papers to conferences. With ArXiv Vanity , you can read the papers rendered in the browser as opposed to the PDF format. Distill is aiming at making research \"clear, dynamic and vivid\". It is a super-interesting effort that shows that research does not have to be constrained by a printable A4 sized PDF format. Maybe all research can be published like this someday.","title":"Finding Research Papers"},{"location":"maps/","text":"","title":"Maps"},{"location":"recommendations/","text":"Recommendations Websites Let's start with some interesting websites to read or check regularly if you're interested in Computer Science: Hacker News is a great resource for all kinds of news related to technology. They have a weekly newsletter that sends a digest of interesting links. This is an email I look forward to every single week. Great stuff! Itamar Turner-Trauring from Code Without Rules has some interesting thoughts on the work of a software engineer, priorities, and many mistakes to avoid. Whether or not you agree with him, he brings a refreshing perspective and frankness to many topics. This article is a typical example. Medium is a platform for all kinds of articles, with authors ranging from real journalists to hobby writers. OpenSource.com has a few interesting articles related to - you guessed it - open source. Tech company blogs have high quality standards, so it's worth checking them every so often. Lyft Engineering Blog Uber Engineering Blog Netflix Tech Blog AirBnB Engineering and Data Science Azure Machine Learning Blog Google Research Blog Google Cloud Big Data and Machine Learning Blog I found this nice article about geospatial analysis on the Twilio blog. Hakka Labs is a community for Data Engineers. DataQuest has lots of broadly data science related articles, e.g. this one on data visualization. At some point you'll want to set up your own webpage. In any case, a simple tool to get started is by hosting it through GitHub Pages . I've had a great experience with it, even though I haven't used a lot of its functionalities since I brought my own template. I created a few backgrounds using cool-backgrounds.io , some of which are featured on this webpage. Podcasts Let's start with the tech/software/data related podcasts: The Microsoft Research Podcast is pretty interesting, because you otherwise only rarely get researchers talking about their journey on podcasts. Masters of Scale by Reid Hoffman does a great job at conveying a message while telling a story in a compelling and entertaining way. Plus, the guests alone are worth tuning in, with Sheryl Sandberg and Reed Hastings to name a few. Packet Pushers - Datanauts mostly focuses on infrastructure (cloud networking, storage, compute, etc.) PodCtl covers the latest in the Kubernetes ecosystem. Various O'Reilly podcasts such as O'Reilly Data Show O'Reilly Programming O'Reilly Radar covers emerging technologies Hanselminutes by Scott Hanselman covers a very diverse set of topics related to technology. Software Engineering Daily has been growing in popularity. It's great if you want to get an idea of a field, say web development, or caching in distributed systems, you name it. ... and if we dare go beyond tech-focused podcasts, there's a ton of other interesting ones! In Worklife Adam Grant talks about companies that make their workplace special in order to foster creativity, encourage criticism, and support a healthy work-life balance. Extremely thought-provoking, and definitely time well spent. Freakonomics Radio by Steven J. Dubner is probably my favorite podcast on economics for exploring the \"hidden side of everything\". Remarkably, they manage to give all sides of any given discussion some time to represent their viewpoint. It is rare to finish an episode with the feeling that there's a clear divide between good and bad. Instead, Dubner accomplishes something fairly unique: he makes us think that maybe there's a little more to the topic than we thought... NPR's Planet Money and its daily counterpart, The Indicator , shed some light on various (well-known and obscure) aspects of economics. Conversations with Tyler has an extraordinary set of guests including Nassim Nicholas Taleb, Larry Summers, Raj Chetty, Jonathan Haidt. Hidden Brain from NPR E-Learning Whatever you need an introduction to, I'm sure you'll find it on EdX , Coursera , or Udacity . I've had some fantastic experiences with foundational courses on all of these platforms. High quality advanced courses are a lot harder to find. I usually look at more than 10-15 different ones before I'm happy with the course in terms of difficulty and structure. Here are some classes I can personally recommend: Machine Learning by Andrew Ng (Stanford / Coursera) is the perfect course to start with ML if you know basic calculus, linear algebra and programming. Introduction to Apache Spark by Anthony D. Joseph (UC Berkeley / Databricks / EdX) was a great way to start with Spark. Unfortunately, I didn't have the time for the two follow-up courses on Spark and they are now archived. Scalable Microservices with Kubernetes by Carter Morgan and Kelsey Hightower (Google / Udacity) was a ton of fun. It teaches the very basics of Kubernetes, enough to deploy a very basic microservice. The good news is that the community is vibrant and you'll find answers for any problem once you've picked up the basics in this course. As these platforms are looking to find a sustainable way to make money, it's become harder to find the right fit, since even just looking at materials requires paying a course fee. The models are different from platform to platform and sometimes even from course to course. Coursera has started to use monthly fees which is great if you have time, but bad if you're a part-time learner. EdX seems to remain free until you want a course certificate. Udacity has different models for every class. My favorite one so far was to pay a flat rate of $200, with a money back guarantee if you can't find a job after completion. That sounds like they're really confident their course is worth it. We'll see in which direction these platforms decide to evolve in the future. MOOCs are certainly not going away anytime soon.","title":"Recommendations"},{"location":"recommendations/#recommendations","text":"","title":"Recommendations"},{"location":"recommendations/#websites","text":"Let's start with some interesting websites to read or check regularly if you're interested in Computer Science: Hacker News is a great resource for all kinds of news related to technology. They have a weekly newsletter that sends a digest of interesting links. This is an email I look forward to every single week. Great stuff! Itamar Turner-Trauring from Code Without Rules has some interesting thoughts on the work of a software engineer, priorities, and many mistakes to avoid. Whether or not you agree with him, he brings a refreshing perspective and frankness to many topics. This article is a typical example. Medium is a platform for all kinds of articles, with authors ranging from real journalists to hobby writers. OpenSource.com has a few interesting articles related to - you guessed it - open source. Tech company blogs have high quality standards, so it's worth checking them every so often. Lyft Engineering Blog Uber Engineering Blog Netflix Tech Blog AirBnB Engineering and Data Science Azure Machine Learning Blog Google Research Blog Google Cloud Big Data and Machine Learning Blog I found this nice article about geospatial analysis on the Twilio blog. Hakka Labs is a community for Data Engineers. DataQuest has lots of broadly data science related articles, e.g. this one on data visualization. At some point you'll want to set up your own webpage. In any case, a simple tool to get started is by hosting it through GitHub Pages . I've had a great experience with it, even though I haven't used a lot of its functionalities since I brought my own template. I created a few backgrounds using cool-backgrounds.io , some of which are featured on this webpage.","title":"Websites"},{"location":"recommendations/#podcasts","text":"Let's start with the tech/software/data related podcasts: The Microsoft Research Podcast is pretty interesting, because you otherwise only rarely get researchers talking about their journey on podcasts. Masters of Scale by Reid Hoffman does a great job at conveying a message while telling a story in a compelling and entertaining way. Plus, the guests alone are worth tuning in, with Sheryl Sandberg and Reed Hastings to name a few. Packet Pushers - Datanauts mostly focuses on infrastructure (cloud networking, storage, compute, etc.) PodCtl covers the latest in the Kubernetes ecosystem. Various O'Reilly podcasts such as O'Reilly Data Show O'Reilly Programming O'Reilly Radar covers emerging technologies Hanselminutes by Scott Hanselman covers a very diverse set of topics related to technology. Software Engineering Daily has been growing in popularity. It's great if you want to get an idea of a field, say web development, or caching in distributed systems, you name it. ... and if we dare go beyond tech-focused podcasts, there's a ton of other interesting ones! In Worklife Adam Grant talks about companies that make their workplace special in order to foster creativity, encourage criticism, and support a healthy work-life balance. Extremely thought-provoking, and definitely time well spent. Freakonomics Radio by Steven J. Dubner is probably my favorite podcast on economics for exploring the \"hidden side of everything\". Remarkably, they manage to give all sides of any given discussion some time to represent their viewpoint. It is rare to finish an episode with the feeling that there's a clear divide between good and bad. Instead, Dubner accomplishes something fairly unique: he makes us think that maybe there's a little more to the topic than we thought... NPR's Planet Money and its daily counterpart, The Indicator , shed some light on various (well-known and obscure) aspects of economics. Conversations with Tyler has an extraordinary set of guests including Nassim Nicholas Taleb, Larry Summers, Raj Chetty, Jonathan Haidt. Hidden Brain from NPR","title":"Podcasts"},{"location":"recommendations/#e-learning","text":"Whatever you need an introduction to, I'm sure you'll find it on EdX , Coursera , or Udacity . I've had some fantastic experiences with foundational courses on all of these platforms. High quality advanced courses are a lot harder to find. I usually look at more than 10-15 different ones before I'm happy with the course in terms of difficulty and structure. Here are some classes I can personally recommend: Machine Learning by Andrew Ng (Stanford / Coursera) is the perfect course to start with ML if you know basic calculus, linear algebra and programming. Introduction to Apache Spark by Anthony D. Joseph (UC Berkeley / Databricks / EdX) was a great way to start with Spark. Unfortunately, I didn't have the time for the two follow-up courses on Spark and they are now archived. Scalable Microservices with Kubernetes by Carter Morgan and Kelsey Hightower (Google / Udacity) was a ton of fun. It teaches the very basics of Kubernetes, enough to deploy a very basic microservice. The good news is that the community is vibrant and you'll find answers for any problem once you've picked up the basics in this course. As these platforms are looking to find a sustainable way to make money, it's become harder to find the right fit, since even just looking at materials requires paying a course fee. The models are different from platform to platform and sometimes even from course to course. Coursera has started to use monthly fees which is great if you have time, but bad if you're a part-time learner. EdX seems to remain free until you want a course certificate. Udacity has different models for every class. My favorite one so far was to pay a flat rate of $200, with a money back guarantee if you can't find a job after completion. That sounds like they're really confident their course is worth it. We'll see in which direction these platforms decide to evolve in the future. MOOCs are certainly not going away anytime soon.","title":"E-Learning"},{"location":"resume/","text":"","title":"Resume"},{"location":"software_engineering/","text":"Software Engineering August 26, 2019 Data Structures There's no way you'll get around data structures as a Software Engineer. However, some people mistake \"data structures\" for those obscure ones that take an hour to explain and another to find a good use case for. Various lists, hash maps, trees, hash maps, arrays, and hash maps are your daily bread and butter. Did I mention hash maps? You should know these inside out, with complexity trade-offs etc. You'll probably encounter more complex scenarios that require more specialized data structures as well. If you know your basic ones, it's usually relatively easy to understand what's required in the advanced case. You may have noticed by now that I'm a big fan of hash maps. Apart from that I love Union-Find data structures . They can be used for detecting circles in graphs, among other things. Here's a great resource on graphs: D3 Graph Theory Programming Languages Depending on your situation, you may or may not have the luxury to take a structured approach to learning a new language. There's a few great books that introduce you to the basics and teach your programming in general. Those aren't even that hard to find. The books I list below go beyond the very basics, although they may include some important fundamentals. Effective Modern C++ by Scott Meyers is arguably the most useful book on programming I have ever read. I studied it while learning C++ basics, and could literally see the quality of my code improving. Conversations quickly moved from \"how to somehow get the job done\" to \"how to get the job done properly\", without wasting any time. If you want to get the book, be careful, though! There's a few similarly named titles (all by Scott Meyers), from \"Effective Modern C++\", and \"Effective C++\" to \"More Effective C++\". The most recent version is probably the way to go. Effective Java by Joshua Bloch serves a very similar purpose to Java as Effective Modern C++ to C++. I love that the book contains lots of puzzles that will undoubtedly cost you many nights of sleep. I cannot overstate the effect the \"Concurrency\" chapter has had on my thought process when developing concurrent applications, regardless of the language. I highly recommend Python Tricks by Dan Bader if you're looking to take your Python to the next level. Version Control Quite possibly the most widely used and at the same time least acknowledged technology, version control has saved me from myself more times than I can count. I use Git on a daily basis and still marvel at the capabilities. There's countless ways of learning it, like this Udacity course . Git is the most popular system, and if you get frustrated initially, maybe this will help: from Navin Narra's Tweet And finally a few articles and opinions about git: Git Magic is an accessible page explaining how git works in an engaging manner. Why you should stop using git rebase Anatomy of a perfect pull request is a great resource on how to do pull requests the right way. I get back to this every so often to remind myself of the best practices. Design Patterns and Architecture This first section focuses on articles about patterns... Software Testing Anti-Patterns ... while the second section is more about architecture, or at least thoughts about the structure of projects. Why your next Open Source project may only be an interface Distributed Systems There's an incredible knowledge base out there. I'll just list a few pieces that really inspired me to get into Distributed Systems. Jim Kurose and Keith Ross' Computer Networking - A Top Down Approach convinced me to study Computer Science in the first place. Besides, it played a major part in my decision to go to UMass Amherst, and taking Jim Kurose's grad class on Advanced Computer Networks was simply amazing. The book manages to pick you up from wherever you stand, as an absolute beginner or even if you're familiar with some of the basics of networked communication, and explains the concepts in an engaging manner that will make you understand why things are a certain way. I particularly loved the section on TCP and the various models the book talks about until finally arriving at TCP. Andrew S. Tanenbaum's Modern Operating Systems book really changed the way I think about computers. At the time, I considered operating systems as a black box that does whatever I ask it to do. It is humbling to read about all the work that's been done to make life for users and application developers easier. Must-read for every aspiring CS student. Maarten van Steen and Andrew S. Tanenbaum's Distributed Systems was the book to a grad class on Distributed Systems I took at UMass Amherst. Great read for foundational ideas on the big problems in the field, and how they can be solved. Since I've been working on microservices for a little while, here are a few resources on that topic I recommend: Martin Fowler A great article on Testing Microservices, the sane way by Cindy Sridharan. Work Environment Paul Graham's Maker's Schedule, Manager's Schedule captures the effect of meetings on an engineer's day at work. There's certainly different kinds of roles and various kinds of meetings, but the general idea is still valid: engineers need large continuous chunks of time to get things done. Get happy developers to do what you want by Jessica Kerr talks about how removing friction is the right way to get people to do things, instead of settings rules or (potentially misguided) incentives. Interviewing Coming soon!","title":"Software Engineering"},{"location":"software_engineering/#software-engineering","text":"","title":"Software Engineering"},{"location":"software_engineering/#august-26-2019","text":"","title":"August 26, 2019"},{"location":"software_engineering/#data-structures","text":"There's no way you'll get around data structures as a Software Engineer. However, some people mistake \"data structures\" for those obscure ones that take an hour to explain and another to find a good use case for. Various lists, hash maps, trees, hash maps, arrays, and hash maps are your daily bread and butter. Did I mention hash maps? You should know these inside out, with complexity trade-offs etc. You'll probably encounter more complex scenarios that require more specialized data structures as well. If you know your basic ones, it's usually relatively easy to understand what's required in the advanced case. You may have noticed by now that I'm a big fan of hash maps. Apart from that I love Union-Find data structures . They can be used for detecting circles in graphs, among other things. Here's a great resource on graphs: D3 Graph Theory","title":"Data Structures"},{"location":"software_engineering/#programming-languages","text":"Depending on your situation, you may or may not have the luxury to take a structured approach to learning a new language. There's a few great books that introduce you to the basics and teach your programming in general. Those aren't even that hard to find. The books I list below go beyond the very basics, although they may include some important fundamentals. Effective Modern C++ by Scott Meyers is arguably the most useful book on programming I have ever read. I studied it while learning C++ basics, and could literally see the quality of my code improving. Conversations quickly moved from \"how to somehow get the job done\" to \"how to get the job done properly\", without wasting any time. If you want to get the book, be careful, though! There's a few similarly named titles (all by Scott Meyers), from \"Effective Modern C++\", and \"Effective C++\" to \"More Effective C++\". The most recent version is probably the way to go. Effective Java by Joshua Bloch serves a very similar purpose to Java as Effective Modern C++ to C++. I love that the book contains lots of puzzles that will undoubtedly cost you many nights of sleep. I cannot overstate the effect the \"Concurrency\" chapter has had on my thought process when developing concurrent applications, regardless of the language. I highly recommend Python Tricks by Dan Bader if you're looking to take your Python to the next level.","title":"Programming Languages"},{"location":"software_engineering/#version-control","text":"Quite possibly the most widely used and at the same time least acknowledged technology, version control has saved me from myself more times than I can count. I use Git on a daily basis and still marvel at the capabilities. There's countless ways of learning it, like this Udacity course . Git is the most popular system, and if you get frustrated initially, maybe this will help: from Navin Narra's Tweet And finally a few articles and opinions about git: Git Magic is an accessible page explaining how git works in an engaging manner. Why you should stop using git rebase Anatomy of a perfect pull request is a great resource on how to do pull requests the right way. I get back to this every so often to remind myself of the best practices.","title":"Version Control"},{"location":"software_engineering/#design-patterns-and-architecture","text":"This first section focuses on articles about patterns... Software Testing Anti-Patterns ... while the second section is more about architecture, or at least thoughts about the structure of projects. Why your next Open Source project may only be an interface","title":"Design Patterns and Architecture"},{"location":"software_engineering/#distributed-systems","text":"There's an incredible knowledge base out there. I'll just list a few pieces that really inspired me to get into Distributed Systems. Jim Kurose and Keith Ross' Computer Networking - A Top Down Approach convinced me to study Computer Science in the first place. Besides, it played a major part in my decision to go to UMass Amherst, and taking Jim Kurose's grad class on Advanced Computer Networks was simply amazing. The book manages to pick you up from wherever you stand, as an absolute beginner or even if you're familiar with some of the basics of networked communication, and explains the concepts in an engaging manner that will make you understand why things are a certain way. I particularly loved the section on TCP and the various models the book talks about until finally arriving at TCP. Andrew S. Tanenbaum's Modern Operating Systems book really changed the way I think about computers. At the time, I considered operating systems as a black box that does whatever I ask it to do. It is humbling to read about all the work that's been done to make life for users and application developers easier. Must-read for every aspiring CS student. Maarten van Steen and Andrew S. Tanenbaum's Distributed Systems was the book to a grad class on Distributed Systems I took at UMass Amherst. Great read for foundational ideas on the big problems in the field, and how they can be solved. Since I've been working on microservices for a little while, here are a few resources on that topic I recommend: Martin Fowler A great article on Testing Microservices, the sane way by Cindy Sridharan.","title":"Distributed Systems"},{"location":"software_engineering/#work-environment","text":"Paul Graham's Maker's Schedule, Manager's Schedule captures the effect of meetings on an engineer's day at work. There's certainly different kinds of roles and various kinds of meetings, but the general idea is still valid: engineers need large continuous chunks of time to get things done. Get happy developers to do what you want by Jessica Kerr talks about how removing friction is the right way to get people to do things, instead of settings rules or (potentially misguided) incentives.","title":"Work Environment"},{"location":"software_engineering/#interviewing","text":"Coming soon!","title":"Interviewing"}]}